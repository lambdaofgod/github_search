# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/Parsing imports.ipynb (unless otherwise specified).

__all__ = [
    "Import",
    "get_import_expressions",
    "get_imports",
    "get_module_from_import",
    "get_modules",
]

# Cell
import ast
from collections import namedtuple

# Cell


Import = namedtuple("Import", ["module", "name", "alias"])


def _get_imports(file_content):
    root = ast.parse(file_content)

    for node in ast.iter_child_nodes(root):
        if isinstance(node, ast.Import):
            module = []
        elif isinstance(node, ast.ImportFrom) and not node.module is None:
            module = node.module.split(".")
        else:
            continue

        for n in node.names:
            yield Import(module, n.name.split("."), n.asname)


# Cell


def get_import_expressions(file_contents):
    root = ast.parse(file_contents)
    for node in ast.iter_child_nodes(root):
        if isinstance(node, ast.Import) or isinstance(node, ast.ImportFrom):
            yield node


def get_imports(file_contents):
    return "\n".join(
        list(
            [
                astunparse.unparse(imp).strip()
                for imp in parsing_imports.get_import_expressions(file_contents)
            ]
        )
    )


def get_module_from_import(imp):
    if imp.module == []:
        return imp.name[0]
    else:
        return imp.module[0]


def get_modules(file_content):
    for imp in _get_imports(file_content):
        yield get_module_from_import(imp)
