# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/Node_Embedding_Evaluation.ipynb (unless otherwise specified).

__all__ = ["make_igraph", "get_nodes", "get_node_embedding_model_and_results"]

# Cell

import ast
import itertools
import os
import pickle
from operator import itemgetter

import astunparse
import csrgraph
import csrgraph as cg
import gensim
import nodevectors
import numpy as np
import pandas as pd
from sklearn import metrics

from github_search import paperswithcode_tasks, python_tokens

# Cell

# Cell


def get_nodes(call_graph, node_names):
    selected_nodes = call_graph.names[call_graph.names.isin(node_names)]
    return selected_nodes


def get_node_embedding_model_and_results(
    node_embeddings, call_graph, example_nodes, selected_names=None, topk=10
):
    if selected_names is None:
        selected_nodes = call_graph.names
    else:
        selected_nodes = get_node_indices(call_graph, selected_names)

    results = []
    for (i, node_name) in enumerate(example_nodes.values):
        distances = metrics.euclidean_distances(
            node_embeddings[example_nodes.index[[i]]], node_embeddings
        )
        results.append((call_graph.names[np.argsort(distances)[0, :topk]].values))
    results_df = pd.DataFrame(results)
    results_df.index = example_nodes.values
    return results_df.T
