# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/PapersWithCode_Tasks.ipynb (unless otherwise specified).

__all__ = ['get_paperswithcode_dfs', 'get_papers_with_repo_df', 'get_papers_with_biggest_tasks',
           'get_papers_with_biggest_tasks_df']

# Cell
import pandas as pd

# Cell


def get_paperswithcode_dfs(paperswithcode_filename='data/links-between-papers-and-code.json.gz', papers_filename='data/papers-with-abstracts.json.gz'):
    paperswithcode_df = pd.read_json(paperswithcode_filename)
    paperswithcode_df['repo'] = paperswithcode_df['repo_url'].str.replace('https://github.com/', '')

    all_papers_df = pd.read_json(papers_filename)
    return paperswithcode_df, all_papers_df


def get_papers_with_repo_df(all_papers_df, paperswithcode_df, repo_names):
    """
    add repo information to arxiv paper information
    """
    paperswithcode_with_repo_df = paperswithcode_df[paperswithcode_df['repo'].isin(repo_names)]
    paperswithcode_diff_columns = list(paperswithcode_with_repo_df.columns.difference(all_papers_df.columns)) + ['paper_url']
    papers_with_repo_df = all_papers_df[all_papers_df['paper_url'].isin(paperswithcode_with_repo_df['paper_url'])]

    return papers_with_repo_df.merge(paperswithcode_with_repo_df[paperswithcode_diff_columns], on='paper_url')


def get_papers_with_biggest_tasks(papers_with_repo_df, n_biggest_tasks):
    """
    fetch papers which contain at least one task that is in n_biggest_tasks (by number of task occurrences)
    """
    all_tasks = papers_with_repo_df.explode('tasks')['tasks']
    biggest_tasks = all_tasks.value_counts()[:n_biggest_tasks]

    papers_with_repo_with_biggest_tasks_df = papers_with_repo_df[papers_with_repo_df['tasks'].apply(lambda tasks: any(task in biggest_tasks.index for task in tasks))]
    papers_with_repo_with_biggest_tasks_df['most_common_task'] = papers_with_repo_with_biggest_tasks_df['tasks'].apply(
        lambda tasks: biggest_tasks[[t for t in tasks if t in biggest_tasks.index]].idxmax() if len(biggest_tasks[ [t for t in tasks if t in biggest_tasks.index]]) > 0 else None
    )
    return papers_with_repo_with_biggest_tasks_df


def get_papers_with_biggest_tasks_df(n_biggest_tasks=None):
    paperswithcode_df, all_papers_df = get_paperswithcode_dfs()
    n_biggest_tasks = n_biggest_tasks if not n_biggest_tasks is None else len(paperswithcode_df)
    papers_with_repo_df = get_papers_with_repo_df(all_papers_df, paperswithcode_df, paperswithcode_df['repo'])
    return get_papers_with_biggest_tasks(papers_with_repo_df, n_biggest_tasks=n_biggest_tasks)