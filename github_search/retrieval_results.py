# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/Retrieval.ipynb (unless otherwise specified).

__all__ = ['Retriever']

# Cell
import numpy as np
import pandas as pd

import attr
import pickle

from sklearn import metrics

from .matching_zsl import *

# Cell


@attr.s
class Retriever:

    input_embedder = attr.ib()
    query_embedder = attr.ib()
    zs_learner = attr.ib()
    embeddings_calculated = attr.ib(default=False)

    def set_embeddings(self, X_names, X, X_descriptions=None):
        self.X_embeddings = self.input_embedder.transform(X)
        self.X_df = pd.DataFrame({"input": X})
        if not X_descriptions is None:
            self.X_df['description'] = X_descriptions
        self.X_df.index = X_names
        self.embeddings_calculated = True

    def retrieve_query_results(self, query, k=25, similarity=metrics.pairwise.cosine_similarity):
        if not self.embeddings_calculated:
            raise Exception("embeddings not calculated")
        input_embeddings = self.X_embeddings
        y_embeddings = self.query_embedder.transform([query])
        predictions = self.zs_learner.predict_raw(input_embeddings)
        input_target_similarities = similarity(predictions, y_embeddings)
        top_idxs = np.argsort(-input_target_similarities[:,0])[:k]
        top_similarities = input_target_similarities[top_idxs, 0]
        results_df = self.X_df.iloc[top_idxs]
        results_df['similarity'] = top_similarities
        return results_df.drop(columns=['input'])

    def from_retriever_learner(learner):
        return Retriever(learner.input_embedder, learner.y_embedder, learner.zs_learner)
