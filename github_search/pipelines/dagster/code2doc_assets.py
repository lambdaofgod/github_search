from dagster import (
    asset,
    multi_asset,
    Definitions,
    Output,
    AssetOut,
    AssetIn,
    ConfigurableResource,
    AssetExecutionContext,
)
import traceback
import yaml
import logging
import pandas as pd
from github_search.pipelines.steps import Code2DocSteps
from github_search.pipelines.dagster.resources import Code2DocConfig, PhoenixTracker
from tqdm.contrib.logging import tqdm_logging_redirect
import pathlib

logging.basicConfig(level=logging.INFO)


@multi_asset(
    outs={"repos_df": AssetOut(), "python_code_df": AssetOut()},
    required_resource_keys={"code2doc_config"},
)
def prepared_data(context: AssetExecutionContext):
    """
    repos and python code dataframes
    """
    code2doc_config = context.resources.code2doc_config
    with tqdm_logging_redirect():
        repos_df, python_code_df = Code2DocSteps.prepare_data_df(
            code2doc_config.repos_df_path,
            code2doc_config.python_code_path,
        )
    yield Output(repos_df, output_name="repos_df")
    yield Output(python_code_df, output_name="python_code_df")


@asset(
    required_resource_keys={"code2doc_config"},
    ins={"repos_df": AssetIn(), "python_code_df": AssetIn()},
)
def sampled_repos(
    context: AssetExecutionContext, repos_df: pd.DataFrame, python_code_df: pd.DataFrame
) -> pd.DataFrame:
    """
    Repos selected with a procedure described in 2.3 'Selecting repository subset'
    """
    code2doc_config = context.resources.code2doc_config
    sampled_repos_df = Code2DocSteps.create_repos_sample_df(
        repos_df,
        python_code_df,
        code2doc_config.n_repos_per_task,
        code2doc_config.min_task_size,
        code2doc_config.max_task_size,
        code2doc_config.max_random_baseline_score,
    )
    return sampled_repos_df


@multi_asset(
    outs={"generated_readmes": AssetOut(), "readme_generation_traces": AssetOut()},
)
def code2doc_readmes(
    context: AssetExecutionContext,
    code2doc_config: Code2DocConfig,
    python_code_df: pd.DataFrame,
    sampled_repos: pd.DataFrame,
    phoenix: PhoenixTracker,
) -> pd.DataFrame:
    """
    README files generated by Code2Doc 5.3 'Code2Doc - README generation'
    """
    code2doc_config = context.resources.code2doc_config
    logging.info(
        f"Generating readmes with code2doc using {code2doc_config.lm_model_name}, "
        f"using maximum of {code2doc_config.files_per_repo} files per repo"
    )

    phoenix.launch()
    logging.warning("Using only 100 repos")
    with tqdm_logging_redirect():
        generated_readme_df = Code2DocSteps.generate_code2doc_readmes_df(
            python_code_df,
            sampled_repos.iloc[:100],
            files_per_repo=code2doc_config.files_per_repo,
            lm_model_name=code2doc_config.lm_model_name,
            lm_base_url=code2doc_config.lm_base_url,
        )

    yield Output(generated_readme_df, output_name="generated_readmes")
    yield Output(phoenix.get_traces_df(), output_name="readme_generation_traces")
