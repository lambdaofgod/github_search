# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/Crawling Github.ipynb (unless otherwise specified).

__all__ = ['token', 'get_python_files_df']

# Cell
import pandas as pd
import requests
import json
from operator import itemgetter
import tqdm

# Cell

token = open('../data/token.txt', 'r').read().strip()


def _get_tree(owner, repo_name):
    url_template = 'https://api.github.com/repos/{}/{}/git/trees/master?recursive=1'
    headers = {'Authorization': 'token ' + token}
    return requests.get(url_template.format(owner, repo_name), headers=headers)


def _get_python_files(owner, repo_name):
    try:
        files = json.loads(_get_tree(owner, repo_name).text)['tree']
        for maybe_file in files:
            is_python_file = maybe_file['path'][-3:] == '.py'
            if maybe_file['type'] == 'blob' and is_python_file:
                path = maybe_file['path']
                raw_file_url_template = 'https://raw.githubusercontent.com/{}/{}/master/{}'
                raw_file_url = raw_file_url_template.format(owner, repo_name, path)
                yield owner, repo_name, path, requests.get(raw_file_url).text, maybe_file['sha']
    except (KeyError, json.JSONDecodeError) as e:
        print('failed for {}/{}'.format(owner, repo_name), e)
        return
        yield

# Cell


def _make_python_files_df(file_tuples):
    if len(file_tuples) > 0:
        df = pd.DataFrame.from_records(file_tuples)
        df.columns = ['owner', 'repo_name', 'file_path', 'content', 'sha']
        return df
    else:
        return pd.DataFrame({})


def get_python_files_df(owner, repo_name):
    file_tuples = list(_get_python_files(owner, repo_name))
    return _make_python_files_df(file_tuples)