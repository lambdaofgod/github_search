# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/Crawling Github.ipynb (unless otherwise specified).

__all__ = ['token', 'get_python_files_df', 'clone_repo', 'clone_repos']

# Cell
import pandas as pd
import requests
import json
from operator import itemgetter
import tqdm

import os
import tqdm
import glob
from git.repo.base import Repo
import pathlib
from github_search import paperswithcode_tasks

import itertools
import codecs

# Cell

token = open('data/token.txt', 'r').read().strip()


def _get_tree(owner, repo_name):
    url_template = 'https://api.github.com/repos/{}/{}/git/trees/master?recursive=1'
    headers = {'Authorization': 'token ' + token}
    return requests.get(url_template.format(owner, repo_name), headers=headers)


def _get_python_files(owner, repo_name):
    try:
        files = json.loads(_get_tree(owner, repo_name).text)['tree']
        for maybe_file in files:
            extension = maybe_file['path'][-3:]
            is_valid_file = extension == '.py' or os.path.basename(maybe_file) == 'README.md'
            if maybe_file['type'] == 'blob' and is_valid_file:
                path = maybe_file['path']
                raw_file_url_template = 'https://raw.githubusercontent.com/{}/{}/master/{}'
                raw_file_url = raw_file_url_template.format(owner, repo_name, path)
                yield owner, repo_name, path, requests.get(raw_file_url).text, maybe_file['sha']
    except (KeyError, json.JSONDecodeError) as e:
        print('failed for {}/{}'.format(owner, repo_name), e)
        return
        yield

# Cell


def _make_python_files_df(file_tuples):
    if len(file_tuples) > 0:
        df = pd.DataFrame.from_records(file_tuples)
        df.columns = ['owner', 'repo_name', 'file_path', 'content', 'sha']
        return df
    else:
        return pd.DataFrame({})


def get_python_files_df(owner, repo_name):
    file_tuples = list(_get_python_files(owner, repo_name))
    return _make_python_files_df(file_tuples)

# Cell

def clone_repo(destination_prefix, repo_name):
    dest_path = os.path.join(destination_prefix, repo_name)
    if not os.path.exists(dest_path):
        Repo.clone_from("https://github.com/{}".format(repo_name), dest_path)
        for p in pathlib.Path(dest_path).rglob("*"):
            if os.path.isfile(p) and not (str(p).endswith(".py") or str(p).endswith(".md")):
                os.remove(p)

def clone_repos(repos, destination_prefix="repos"):
    for repo in tqdm.tqdm(repos):
        try:
            clone_repo(destination_prefix, repo)
        except Exception as e:
            print(e)